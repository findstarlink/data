# Generated initially using github-actions-wizard (https://github.com/cmdr2/github-actions-wizard)

name: CI Pipeline
run-name: CI Pipeline
on:
  push:
    branches:
    - main
  workflow_run:
    workflows:
    - Update TLE Data
    types:
    - completed
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Create tle.js
      run: |-
        echo "var TLE = " > tle.js
        cat tle.json >> tle.js
        echo "\n" >> tle.js
    - name: Copy files into the build
      run: |-
        mkdir build
        cp tle.json tle.js strings_en-US.json starlink_celestrak_supplemental.txt build/
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: build

  deploy_to_cloudflare_pages_on_main_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v5
      with:
        name: build
        path: .
    - name: Deploy to Cloudflare Pages
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: pages deploy . --project-name=findstarlink-data

  major_version_bump_check:
    runs-on: ubuntu-latest
    needs: deploy_to_cloudflare_pages_on_main_push
    outputs:
      major_version_bumped: ${{ steps.has_major_bump.outputs.bumped }}
      curr_version: ${{ steps.curr_version.outputs.version }}
      commit_msg: ${{ steps.get_commit_msg.outputs.commit_msg }}
    steps:
    - name: Checkout last 2 commits
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    - name: Get previous commit SHA
      id: prev_commit
      run: |
        echo "sha=$(git rev-parse HEAD^1)" >> $GITHUB_OUTPUT
    - name: Get previous package.json version
      id: prev_version
      run: |
        git show ${{ steps.prev_commit.outputs.sha }}:package.json > prev_package.json
        echo "version=$(jq -r .version prev_package.json)" >> $GITHUB_OUTPUT
    - name: Get current package.json version
      id: curr_version
      run: |
        echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
    - name: Compare major versions
      id: has_major_bump
      run: |
        prev_major=$(echo "${{ steps.prev_version.outputs.version }}" | cut -d. -f1)
        curr_major=$(echo "${{ steps.curr_version.outputs.version }}" | cut -d. -f1)
        if [ "$curr_major" != "$prev_major" ]; then
          echo "Major version bumped from $prev_major to $curr_major"
          echo "bumped=true" >> $GITHUB_OUTPUT
        else
          echo "No major version bump."
          echo "bumped=true" >> $GITHUB_OUTPUT
        fi
    - name: Get last commit message
      id: get_commit_msg
      run: |
        echo "commit_msg=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

  create_release:
    runs-on: ubuntu-latest
    needs: major_version_bump_check
    if: needs.major_version_bump_check.outputs.major_version_bumped == 'true'
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.major_version_bump_check.outputs.curr_version }}
        name: v${{ needs.major_version_bump_check.outputs.curr_version }}
        body: |
          ${{ needs.major_version_bump_check.outputs.commit_msg }}
        draft: false
        prerelease: false

  invalidate_cloudflare_cache:
    runs-on: ubuntu-latest
    needs: major_version_bump_check
    if: needs.major_version_bump_check.outputs.major_version_bumped == 'true'
    steps:
    - name: Ask Cloudflare to invalidate specific cache URLs
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{
            "files": [
              "https://findstarlink.com/tle.json",
              "https://findstarlink.com/tle.js",
              "https://findstarlink.com/strings_en-US.json",
              "https://findstarlink.com/starlink_celestrak_supplemental.txt"
            ]
          }'

  invalidate_aws_lambda_cache:
    runs-on: ubuntu-latest
    needs: major_version_bump_check
    if: needs.major_version_bump_check.outputs.major_version_bumped == 'true'
    permissions:
      id-token: write
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.LAMBDA_DEPLOY_ROLE }}
        aws-region: us-east-1
    - name: Update a dummy env var in AWS Lambda to force cache refresh
      run: |
        # Fetch current environment variables
        export FUNC_NAME=findstarlink
        export REFRESH_TIME=$(date +%s)
        export CURR_ENV=$(aws lambda get-function-configuration --function-name "$FUNC_NAME" --query 'Environment.Variables' --output json)

        # Merge or add REFRESH_TIME
        export NEW_ENV=$(echo "$CURR_ENV" | jq --arg rt "$REFRESH_TIME" '. + {REFRESH_TIME: $rt}')

        # Update function configuration with merged environment
        COMMAND="aws lambda update-function-configuration --function-name "$FUNC_NAME" --query LastUpdateStatus --environment '{\"Variables\":$NEW_ENV}'"
        eval $COMMAND
